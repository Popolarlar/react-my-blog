{
  "{\"sourceRoot\":\"/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jin/ReactProject/my-blog-app/my-blog-backend\",\"filename\":\"/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jin/ReactProject/my-blog-app/my-blog-backend\",\"plugins\":[],\"presets\":[]}:7.10.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jin/ReactProject/my-blog-app/my-blog-backend",
      "filename": "/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jin/ReactProject/my-blog-app/my-blog-backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "import express from \"express\";\nimport bodyParser from \"body-parser\";\nconst app = express(); // Use the BODY PARSER to parse the JSON object in the REQUEST and add a BODY property to the REQUEST parameter\n\napp.use(bodyParser.json()); // After that, we can use req.body.var to access JSON\n// Set a GET endpoint\n\napp.get(\"/hello\", (req, res) => res.send(\"Hello!\")); // Set a GET endpoint(use URL params)\n\napp.get(\"/hello/:name\", (req, res) => res.send(`Hello, ${req.params.name}!`)); // Set a POST endpoint(use boby parser)\n\napp.post(\"/hello\", (req, res) => res.send(`Hello, ${req.body.name}!`)); // Start the server\n\napp.listen(8000, () => console.log(\"Listening on port 8000!\")); // npx babel-node src/server.js\n// http://localhost:8000/hello\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwiYm9keVBhcnNlciIsImFwcCIsInVzZSIsImpzb24iLCJnZXQiLCJyZXEiLCJyZXMiLCJzZW5kIiwicGFyYW1zIiwibmFtZSIsInBvc3QiLCJib2R5IiwibGlzdGVuIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsT0FBUCxNQUFvQixTQUFwQjtBQUNBLE9BQU9DLFVBQVAsTUFBdUIsYUFBdkI7QUFFQSxNQUFNQyxHQUFHLEdBQUdGLE9BQU8sRUFBbkIsQyxDQUVBOztBQUNBRSxHQUFHLENBQUNDLEdBQUosQ0FBUUYsVUFBVSxDQUFDRyxJQUFYLEVBQVIsRSxDQUNBO0FBRUE7O0FBQ0FGLEdBQUcsQ0FBQ0csR0FBSixDQUFRLFFBQVIsRUFBa0IsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWNBLEdBQUcsQ0FBQ0MsSUFBSixDQUFTLFFBQVQsQ0FBaEMsRSxDQUVBOztBQUNBTixHQUFHLENBQUNHLEdBQUosQ0FBUSxjQUFSLEVBQXdCLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjQSxHQUFHLENBQUNDLElBQUosQ0FBVSxVQUFTRixHQUFHLENBQUNHLE1BQUosQ0FBV0MsSUFBSyxHQUFuQyxDQUF0QyxFLENBRUE7O0FBQ0FSLEdBQUcsQ0FBQ1MsSUFBSixDQUFTLFFBQVQsRUFBbUIsQ0FBQ0wsR0FBRCxFQUFNQyxHQUFOLEtBQWNBLEdBQUcsQ0FBQ0MsSUFBSixDQUFVLFVBQVNGLEdBQUcsQ0FBQ00sSUFBSixDQUFTRixJQUFLLEdBQWpDLENBQWpDLEUsQ0FFQTs7QUFDQVIsR0FBRyxDQUFDVyxNQUFKLENBQVcsSUFBWCxFQUFpQixNQUFNQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSx5QkFBWixDQUF2QixFLENBRUE7QUFDQSIsInNvdXJjZVJvb3QiOiIvVXNlcnMvamluL1JlYWN0UHJvamVjdC9teS1ibG9nLWFwcC9teS1ibG9nLWJhY2tlbmQvc3JjLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIjtcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG4vLyBVc2UgdGhlIEJPRFkgUEFSU0VSIHRvIHBhcnNlIHRoZSBKU09OIG9iamVjdCBpbiB0aGUgUkVRVUVTVCBhbmQgYWRkIGEgQk9EWSBwcm9wZXJ0eSB0byB0aGUgUkVRVUVTVCBwYXJhbWV0ZXJcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuLy8gQWZ0ZXIgdGhhdCwgd2UgY2FuIHVzZSByZXEuYm9keS52YXIgdG8gYWNjZXNzIEpTT05cblxuLy8gU2V0IGEgR0VUIGVuZHBvaW50XG5hcHAuZ2V0KFwiL2hlbGxvXCIsIChyZXEsIHJlcykgPT4gcmVzLnNlbmQoXCJIZWxsbyFcIikpO1xuXG4vLyBTZXQgYSBHRVQgZW5kcG9pbnQodXNlIFVSTCBwYXJhbXMpXG5hcHAuZ2V0KFwiL2hlbGxvLzpuYW1lXCIsIChyZXEsIHJlcykgPT4gcmVzLnNlbmQoYEhlbGxvLCAke3JlcS5wYXJhbXMubmFtZX0hYCkpO1xuXG4vLyBTZXQgYSBQT1NUIGVuZHBvaW50KHVzZSBib2J5IHBhcnNlcilcbmFwcC5wb3N0KFwiL2hlbGxvXCIsIChyZXEsIHJlcykgPT4gcmVzLnNlbmQoYEhlbGxvLCAke3JlcS5ib2R5Lm5hbWV9IWApKTtcblxuLy8gU3RhcnQgdGhlIHNlcnZlclxuYXBwLmxpc3Rlbig4MDAwLCAoKSA9PiBjb25zb2xlLmxvZyhcIkxpc3RlbmluZyBvbiBwb3J0IDgwMDAhXCIpKTtcblxuLy8gbnB4IGJhYmVsLW5vZGUgc3JjL3NlcnZlci5qc1xuLy8gaHR0cDovL2xvY2FsaG9zdDo4MDAwL2hlbGxvXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "express",
        "bodyParser",
        "app",
        "use",
        "json",
        "get",
        "req",
        "res",
        "send",
        "params",
        "name",
        "post",
        "body",
        "listen",
        "console",
        "log"
      ],
      "mappings": "AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,MAAMC,GAAG,GAAGF,OAAO,EAAnB,C,CAEA;;AACAE,GAAG,CAACC,GAAJ,CAAQF,UAAU,CAACG,IAAX,EAAR,E,CACA;AAEA;;AACAF,GAAG,CAACG,GAAJ,CAAQ,QAAR,EAAkB,CAACC,GAAD,EAAMC,GAAN,KAAcA,GAAG,CAACC,IAAJ,CAAS,QAAT,CAAhC,E,CAEA;;AACAN,GAAG,CAACG,GAAJ,CAAQ,cAAR,EAAwB,CAACC,GAAD,EAAMC,GAAN,KAAcA,GAAG,CAACC,IAAJ,CAAU,UAASF,GAAG,CAACG,MAAJ,CAAWC,IAAK,GAAnC,CAAtC,E,CAEA;;AACAR,GAAG,CAACS,IAAJ,CAAS,QAAT,EAAmB,CAACL,GAAD,EAAMC,GAAN,KAAcA,GAAG,CAACC,IAAJ,CAAU,UAASF,GAAG,CAACM,IAAJ,CAASF,IAAK,GAAjC,CAAjC,E,CAEA;;AACAR,GAAG,CAACW,MAAJ,CAAW,IAAX,EAAiB,MAAMC,OAAO,CAACC,GAAR,CAAY,yBAAZ,CAAvB,E,CAEA;AACA",
      "sourceRoot": "/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/",
      "sourcesContent": [
        "import express from \"express\";\nimport bodyParser from \"body-parser\";\n\nconst app = express();\n\n// Use the BODY PARSER to parse the JSON object in the REQUEST and add a BODY property to the REQUEST parameter\napp.use(bodyParser.json());\n// After that, we can use req.body.var to access JSON\n\n// Set a GET endpoint\napp.get(\"/hello\", (req, res) => res.send(\"Hello!\"));\n\n// Set a GET endpoint(use URL params)\napp.get(\"/hello/:name\", (req, res) => res.send(`Hello, ${req.params.name}!`));\n\n// Set a POST endpoint(use boby parser)\napp.post(\"/hello\", (req, res) => res.send(`Hello, ${req.body.name}!`));\n\n// Start the server\napp.listen(8000, () => console.log(\"Listening on port 8000!\"));\n\n// npx babel-node src/server.js\n// http://localhost:8000/hello\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1593400191474
  },
  "{\"sourceRoot\":\"/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jin/ReactProject/my-blog-app/my-blog-backend\",\"filename\":\"/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jin/ReactProject/my-blog-app/my-blog-backend\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jin/ReactProject/my-blog-app/my-blog-backend",
      "filename": "/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jin/ReactProject/my-blog-app/my-blog-backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/server.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _mongodb = require(\"mongodb\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar app = (0, _express[\"default\"])(); // Use the BODY PARSER to parse the JSON object in the REQUEST and add a BODY property to the REQUEST parameter\n\napp.use(_bodyParser[\"default\"].json()); // After that, we can use req.body.var to access JSON\n// Set a GET endpoint\n\napp.get(\"/api/articles/:name\", /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {\n    var articleName, client, db, _articleInfo;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            articleName = req.params.name;\n            _context.prev = 1;\n            _context.next = 4;\n            return _mongodb.MongoClient.connect(\"mongodb://localhost:27017\", {\n              userNewUrlParser: true\n            });\n\n          case 4:\n            client = _context.sent;\n            db = client.db(\"my-blog\");\n            _context.next = 8;\n            return db.collection(\"articles\").findOne({\n              name: articleName\n            });\n\n          case 8:\n            _articleInfo = _context.sent;\n            // Send JSON response\n            res.status(200).json(_articleInfo);\n            client.close();\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](1);\n            res.status(500).json({\n              message: \"Error connection to db!\",\n              error: _context.t0\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 13]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}()); // Set a POST endpoint(use URL params)\n\napp.post(\"/api/articles/:name/upvote\", /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(req, res) {\n    var articleName, client, db, _articleInfo2, updatedInfo;\n\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            articleName = req.params.name;\n            _context2.prev = 1;\n            _context2.next = 4;\n            return _mongodb.MongoClient.connect(\"mongodb://localhost:27017\", {\n              userNewUrlParser: true\n            });\n\n          case 4:\n            client = _context2.sent;\n            db = client.db(\"my-blog\");\n            _context2.next = 8;\n            return db.collection(\"articles\").findOne({\n              name: articleName\n            });\n\n          case 8:\n            _articleInfo2 = _context2.sent;\n            _context2.next = 11;\n            return db.collection(\"articles\").updateOne({\n              name: articleName\n            }, {\n              $set: {\n                upvotes: _articleInfo2.upvotes + 1\n              }\n            });\n\n          case 11:\n            _context2.next = 13;\n            return db.collection(\"articles\").findOne({\n              name: articleName\n            });\n\n          case 13:\n            updatedInfo = _context2.sent;\n            // Send JSON response\n            res.status(200).json(updatedInfo);\n            client.close();\n            _context2.next = 21;\n            break;\n\n          case 18:\n            _context2.prev = 18;\n            _context2.t0 = _context2[\"catch\"](1);\n            res.status(500).json({\n              message: \"Error connection to db!\",\n              error: _context2.t0\n            });\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 18]]);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}()); // Set a POST endpoint(use body parser)\n\napp.post(\"/api/articles/:name/add-comment\", function (req, res) {\n  var articleName = req.params.name;\n  var _req$body = req.body,\n      username = _req$body.username,\n      text = _req$body.text;\n  articleInfo[articleName].comments.push({\n    username: username,\n    text: text\n  });\n  res.status(200).send(articleInfo[articleName]);\n}); // Start the server\n// npx babel-node src/server.js\n// http://localhost:8000/hello\n\napp.listen(8000, function () {\n  return console.log(\"Listening on port 8000!\");\n}); // Use nodemon to automatically update server\n// npx nodemon --exec npx babel-node src/server.js\n// Put the script in package.json as \"start\"\n// npm start\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJhcHAiLCJ1c2UiLCJib2R5UGFyc2VyIiwianNvbiIsImdldCIsInJlcSIsInJlcyIsImFydGljbGVOYW1lIiwicGFyYW1zIiwibmFtZSIsIk1vbmdvQ2xpZW50IiwiY29ubmVjdCIsInVzZXJOZXdVcmxQYXJzZXIiLCJjbGllbnQiLCJkYiIsImNvbGxlY3Rpb24iLCJmaW5kT25lIiwiYXJ0aWNsZUluZm8iLCJzdGF0dXMiLCJjbG9zZSIsIm1lc3NhZ2UiLCJlcnJvciIsInBvc3QiLCJ1cGRhdGVPbmUiLCIkc2V0IiwidXB2b3RlcyIsInVwZGF0ZWRJbmZvIiwiYm9keSIsInVzZXJuYW1lIiwidGV4dCIsImNvbW1lbnRzIiwicHVzaCIsInNlbmQiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOzs7Ozs7OztBQUVBLElBQU1BLEdBQUcsR0FBRywwQkFBWixDLENBRUE7O0FBQ0FBLEdBQUcsQ0FBQ0MsR0FBSixDQUFRQyx1QkFBV0MsSUFBWCxFQUFSLEUsQ0FDQTtBQUVBOztBQUNBSCxHQUFHLENBQUNJLEdBQUosQ0FBUSxxQkFBUjtBQUFBLHFFQUErQixpQkFBT0MsR0FBUCxFQUFZQyxHQUFaO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDdkJDLFlBQUFBLFdBRHVCLEdBQ1RGLEdBQUcsQ0FBQ0csTUFBSixDQUFXQyxJQURGO0FBQUE7QUFBQTtBQUFBLG1CQUlOQyxxQkFBWUMsT0FBWixDQUFvQiwyQkFBcEIsRUFBaUQ7QUFDcEVDLGNBQUFBLGdCQUFnQixFQUFFO0FBRGtELGFBQWpELENBSk07O0FBQUE7QUFJckJDLFlBQUFBLE1BSnFCO0FBT3JCQyxZQUFBQSxFQVBxQixHQU9oQkQsTUFBTSxDQUFDQyxFQUFQLENBQVUsU0FBVixDQVBnQjtBQUFBO0FBQUEsbUJBUURBLEVBQUUsQ0FDekJDLFVBRHVCLENBQ1osVUFEWSxFQUV2QkMsT0FGdUIsQ0FFZjtB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QUEsSUFBSSxFQUFKQTtBQUFaLEdBQXZDO0FBRUF2QixFQUFBQSxHQUFHLENBQUNZLE1BQUosQ0FBVyxHQUFYLEVBQWdCYyxJQUFoQixDQUFxQmYsV0FBVyxDQUFDVixXQUFELENBQWhDO0FBQ0QsQ0FQRCxFLENBU0E7QUFDQTtBQUNBOztBQUNBUCxHQUFHLENBQUNpQyxNQUFKLENBQVcsSUFBWCxFQUFpQjtBQUFBLFNBQU1DLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHlCQUFaLENBQU47QUFBQSxDQUFqQixFLENBRUE7QUFDQTtBQUVBO0FBQ0EiLCJzb3VyY2VSb290IjoiL1VzZXJzL2ppbi9SZWFjdFByb2plY3QvbXktYmxvZy1hcHAvbXktYmxvZy1iYWNrZW5kL3NyYy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSBcImJvZHktcGFyc2VyXCI7XG5pbXBvcnQgeyBNb25nb0NsaWVudCB9IGZyb20gXCJtb25nb2RiXCI7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuLy8gVXNlIHRoZSBCT0RZIFBBUlNFUiB0byBwYXJzZSB0aGUgSlNPTiBvYmplY3QgaW4gdGhlIFJFUVVFU1QgYW5kIGFkZCBhIEJPRFkgcHJvcGVydHkgdG8gdGhlIFJFUVVFU1QgcGFyYW1ldGVyXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbi8vIEFmdGVyIHRoYXQsIHdlIGNhbiB1c2UgcmVxLmJvZHkudmFyIHRvIGFjY2VzcyBKU09OXG5cbi8vIFNldCBhIEdFVCBlbmRwb2ludFxuYXBwLmdldChcIi9hcGkvYXJ0aWNsZXMvOm5hbWVcIiwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIGNvbnN0IGFydGljbGVOYW1lID0gcmVxLnBhcmFtcy5uYW1lO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgY2xpZW50ID0gYXdhaXQgTW9uZ29DbGllbnQuY29ubmVjdChcIm1vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTdcIiwge1xuICAgICAgdXNlck5ld1VybFBhcnNlcjogdHJ1ZSxcbiAgICB9KTtcbiAgICBjb25zdCBkYiA9IGNsaWVudC5kYihcIm15LWJsb2dcIik7XG4gICAgY29uc3QgYXJ0aWNsZUluZm8gPSBhd2FpdCBkYlxuICAgICAgLmNvbGxlY3Rpb24oXCJhcnRpY2xlc1wiKVxuICAgICAgLmZpbmRPbmUoeyBuYW1lOiBhcnRpY2xlTmFtZSB9KTtcblxuICAgIC8vIFNlbmQgSlNPTiByZXNwb25zZVxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKGFydGljbGVJbmZvKTtcbiAgICBjbGllbnQuY2xvc2UoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IFwiRXJyb3IgY29ubmVjdGlvbiB0byBkYiFcIiwgZXJyb3IgfSk7XG4gIH1cbn0pO1xuXG4vLyBTZXQgYSBQT1NUIGVuZHBvaW50KHVzZSBVUkwgcGFyYW1zKVxuYXBwLnBvc3QoXCIvYXBpL2FydGljbGVzLzpuYW1lL3Vwdm90ZVwiLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgY29uc3QgYXJ0aWNsZU5hbWUgPSByZXEucGFyYW1zLm5hbWU7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBjbGllbnQgPSBhd2FpdCBNb25nb0NsaWVudC5jb25uZWN0KFwibW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxN1wiLCB7XG4gICAgICB1c2VyTmV3VXJsUGFyc2VyOiB0cnVlLFxuICAgIH0pO1xuICAgIGNvbnN0IGRiID0gY2xpZW50LmRiKFwibXktYmxvZ1wiKTtcbiAgICBjb25zdCBhcnRpY2xlSW5mbyA9IGF3YWl0IGRiXG4gICAgICAuY29sbGVjdGlvbihcImFydGljbGVzXCIpXG4gICAgICAuZmluZE9uZSh7IG5hbWU6IGFydGljbGVOYW1lIH0pO1xuXG4gICAgYXdhaXQgZGIuY29sbGVjdGlvbihcImFydGljbGVzXCIpLnVwZGF0ZU9uZShcbiAgICAgIHsgbmFtZTogYXJ0aWNsZU5hbWUgfSxcbiAgICAgIHtcbiAgICAgICAgJHNldDoge1xuICAgICAgICAgIHVwdm90ZXM6IGFydGljbGVJbmZvLnVwdm90ZXMgKyAxLFxuICAgICAgICB9LFxuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25zdCB1cGRhdGVkSW5mbyA9IGF3YWl0IGRiXG4gICAgICAuY29sbGVjdGlvbihcImFydGljbGVzXCIpXG4gICAgICAuZmluZE9uZSh7IG5hbWU6IGFydGljbGVOYW1lIH0pO1xuXG4gICAgLy8gU2VuZCBKU09OIHJlc3BvbnNlXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24odXBkYXRlZEluZm8pO1xuICAgIGNsaWVudC5jbG9zZSgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogXCJFcnJvciBjb25uZWN0aW9uIHRvIGRiIVwiLCBlcnJvciB9KTtcbiAgfVxufSk7XG5cbi8vIFNldCBhIFBPU1QgZW5kcG9pbnQodXNlIGJvZHkgcGFyc2VyKVxuYXBwLnBvc3QoXCIvYXBpL2FydGljbGVzLzpuYW1lL2FkZC1jb21tZW50XCIsIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBhcnRpY2xlTmFtZSA9IHJlcS5wYXJhbXMubmFtZTtcbiAgY29uc3QgeyB1c2VybmFtZSwgdGV4dCB9ID0gcmVxLmJvZHk7XG5cbiAgYXJ0aWNsZUluZm9bYXJ0aWNsZU5hbWVdLmNvbW1lbnRzLnB1c2goeyB1c2VybmFtZSwgdGV4dCB9KTtcblxuICByZXMuc3RhdHVzKDIwMCkuc2VuZChhcnRpY2xlSW5mb1thcnRpY2xlTmFtZV0pO1xufSk7XG5cbi8vIFN0YXJ0IHRoZSBzZXJ2ZXJcbi8vIG5weCBiYWJlbC1ub2RlIHNyYy9zZXJ2ZXIuanNcbi8vIGh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9oZWxsb1xuYXBwLmxpc3Rlbig4MDAwLCAoKSA9PiBjb25zb2xlLmxvZyhcIkxpc3RlbmluZyBvbiBwb3J0IDgwMDAhXCIpKTtcblxuLy8gVXNlIG5vZGVtb24gdG8gYXV0b21hdGljYWxseSB1cGRhdGUgc2VydmVyXG4vLyBucHggbm9kZW1vbiAtLWV4ZWMgbnB4IGJhYmVsLW5vZGUgc3JjL3NlcnZlci5qc1xuXG4vLyBQdXQgdGhlIHNjcmlwdCBpbiBwYWNrYWdlLmpzb24gYXMgXCJzdGFydFwiXG4vLyBucG0gc3RhcnRcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "app",
        "use",
        "bodyParser",
        "json",
        "get",
        "req",
        "res",
        "articleName",
        "params",
        "name",
        "MongoClient",
        "connect",
        "userNewUrlParser",
        "client",
        "db",
        "collection",
        "findOne",
        "articleInfo",
        "status",
        "close",
        "message",
        "error",
        "post",
        "updateOne",
        "$set",
        "upvotes",
        "updatedInfo",
        "body",
        "username",
        "text",
        "comments",
        "push",
        "send",
        "listen",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/jin/ReactProject/my-blog-app/my-blog-backend/src/",
      "sourcesContent": [
        "import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport { MongoClient } from \"mongodb\";\n\nconst app = express();\n\n// Use the BODY PARSER to parse the JSON object in the REQUEST and add a BODY property to the REQUEST parameter\napp.use(bodyParser.json());\n// After that, we can use req.body.var to access JSON\n\n// Set a GET endpoint\napp.get(\"/api/articles/:name\", async (req, res) => {\n  const articleName = req.params.name;\n\n  try {\n    const client = await MongoClient.connect(\"mongodb://localhost:27017\", {\n      userNewUrlParser: true,\n    });\n    const db = client.db(\"my-blog\");\n    const articleInfo = await db\n      .collection(\"articles\")\n      .findOne({ name: articleName });\n\n    // Send JSON response\n    res.status(200).json(articleInfo);\n    client.close();\n  } catch (error) {\n    res.status(500).json({ message: \"Error connection to db!\", error });\n  }\n});\n\n// Set a POST endpoint(use URL params)\napp.post(\"/api/articles/:name/upvote\", async (req, res) => {\n  const articleName = req.params.name;\n\n  try {\n    const client = await MongoClient.connect(\"mongodb://localhost:27017\", {\n      userNewUrlParser: true,\n    });\n    const db = client.db(\"my-blog\");\n    const articleInfo = await db\n      .collection(\"articles\")\n      .findOne({ name: articleName });\n\n    await db.collection(\"articles\").updateOne(\n      { name: articleName },\n      {\n        $set: {\n          upvotes: articleInfo.upvotes + 1,\n        },\n      }\n    );\n\n    const updatedInfo = await db\n      .collection(\"articles\")\n      .findOne({ name: articleName });\n\n    // Send JSON response\n    res.status(200).json(updatedInfo);\n    client.close();\n  } catch (error) {\n    res.status(500).json({ message: \"Error connection to db!\", error });\n  }\n});\n\n// Set a POST endpoint(use body parser)\napp.post(\"/api/articles/:name/add-comment\", (req, res) => {\n  const articleName = req.params.name;\n  const { username, text } = req.body;\n\n  articleInfo[articleName].comments.push({ username, text });\n\n  res.status(200).send(articleInfo[articleName]);\n});\n\n// Start the server\n// npx babel-node src/server.js\n// http://localhost:8000/hello\napp.listen(8000, () => console.log(\"Listening on port 8000!\"));\n\n// Use nodemon to automatically update server\n// npx nodemon --exec npx babel-node src/server.js\n\n// Put the script in package.json as \"start\"\n// npm start\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1593409132814
  }
}