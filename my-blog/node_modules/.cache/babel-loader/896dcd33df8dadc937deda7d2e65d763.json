{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jin/ReactProject/my-blog-app/my-blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jin/ReactProject/my-blog-app/my-blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/jin/ReactProject/my-blog-app/my-blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import articleContent from\"./article-content\";import ArticlesList from\"../components/ArticlesList\";import NotFoundPage from\"./NotFoundPage\";import CommentsList from\"../components/CommentsList\";import UpvotesSection from\"../components/UpvotesSection\";import AddCommentForm from\"../components/AddCommentForm\";var ArticlePage=function ArticlePage(_ref){var match=_ref.match;var name=match.params.name;var article=articleContent.find(function(article){return article.name===name;});// Use useState HOOK to temporarily store information, and the component will re-render once it changes state\nvar _useState=useState({upvotes:0,comments:[]}),_useState2=_slicedToArray(_useState,2),articleInfo=_useState2[0],SetArticleInfo=_useState2[1];// Use useEffect HOOK to perform the side effects of the component, fetching data, setting state\n// The second para is the watching list that only the members in the list will triger the useEffect. If the watching list is [], the useEffect will only be called once(when the page loaded)\n// useEffect HOOK do NOT allow an async function ex:useEffect(async () =>..\nuseEffect(function(){var fetchData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var result,body;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"/api/articles/\".concat(name));case 2:result=_context.sent;_context.next=5;return result.json();case 5:body=_context.sent;SetArticleInfo(body);case 7:case\"end\":return _context.stop();}}},_callee);}));return function fetchData(){return _ref2.apply(this,arguments);};}();fetchData();},[name]);// In this case, whenever the name changes(different article) the useEffect will be called(changes the articleInfo)\nif(!article){return/*#__PURE__*/React.createElement(NotFoundPage,null);}var otherArticles=articleContent.filter(function(article){return article.name!==name;});return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"h1\",null,article.title),/*#__PURE__*/React.createElement(UpvotesSection,{articleName:name,upvotes:articleInfo.upvotes,setArticleInfo:SetArticleInfo}),article.content.map(function(paragraph,key){return/*#__PURE__*/React.createElement(\"p\",{key:key},paragraph);}),/*#__PURE__*/React.createElement(CommentsList,{comments:articleInfo.comments}),/*#__PURE__*/React.createElement(AddCommentForm,{articleName:name,setArticleInfo:SetArticleInfo}),/*#__PURE__*/React.createElement(\"h3\",null,\"Other Articles:\"),/*#__PURE__*/React.createElement(ArticlesList,{articles:otherArticles}));};export default ArticlePage;","map":{"version":3,"sources":["/Users/jin/ReactProject/my-blog-app/my-blog/src/pages/ArticlePage.js"],"names":["React","useState","useEffect","articleContent","ArticlesList","NotFoundPage","CommentsList","UpvotesSection","AddCommentForm","ArticlePage","match","name","params","article","find","upvotes","comments","articleInfo","SetArticleInfo","fetchData","fetch","result","json","body","otherArticles","filter","title","content","map","paragraph","key"],"mappings":"meAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,cAAP,KAA2B,mBAA3B,CACA,MAAOC,CAAAA,YAAP,KAAyB,4BAAzB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,YAAP,KAAyB,4BAAzB,CACA,MAAOC,CAAAA,cAAP,KAA2B,8BAA3B,CACA,MAAOC,CAAAA,cAAP,KAA2B,8BAA3B,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAAe,IAAZC,CAAAA,KAAY,MAAZA,KAAY,CACjC,GAAMC,CAAAA,IAAI,CAAGD,KAAK,CAACE,MAAN,CAAaD,IAA1B,CACA,GAAME,CAAAA,OAAO,CAAGV,cAAc,CAACW,IAAf,CAAoB,SAACD,OAAD,QAAaA,CAAAA,OAAO,CAACF,IAAR,GAAiBA,IAA9B,EAApB,CAAhB,CAEA;AAJiC,cAKKV,QAAQ,CAAC,CAAEc,OAAO,CAAE,CAAX,CAAcC,QAAQ,CAAE,EAAxB,CAAD,CALb,wCAK1BC,WAL0B,eAKbC,cALa,eAOjC;AACA;AACA;AACAhB,SAAS,CAAC,UAAM,CACd,GAAMiB,CAAAA,SAAS,2FAAG,yKAEKC,CAAAA,KAAK,yBAAkBT,IAAlB,EAFV,QAEVU,MAFU,qCAGGA,CAAAA,MAAM,CAACC,IAAP,EAHH,QAGVC,IAHU,eAIhBL,cAAc,CAACK,IAAD,CAAd,CAJgB,sDAAH,kBAATJ,CAAAA,SAAS,2CAAf,CAOAA,SAAS,GACV,CATQ,CASN,CAACR,IAAD,CATM,CAAT,CAUA;AAEA,GAAI,CAACE,OAAL,CAAc,CACZ,mBAAO,oBAAC,YAAD,MAAP,CACD,CAED,GAAMW,CAAAA,aAAa,CAAGrB,cAAc,CAACsB,MAAf,CACpB,SAACZ,OAAD,QAAaA,CAAAA,OAAO,CAACF,IAAR,GAAiBA,IAA9B,EADoB,CAAtB,CAIA,mBACE,oBAAC,KAAD,CAAO,QAAP,mBACE,8BAAKE,OAAO,CAACa,KAAb,CADF,cAGE,oBAAC,cAAD,EACE,WAAW,CAAEf,IADf,CAEE,OAAO,CAAEM,WAAW,CAACF,OAFvB,CAGE,cAAc,CAAEG,cAHlB,EAHF,CASGL,OAAO,CAACc,OAAR,CAAgBC,GAAhB,CAAoB,SAACC,SAAD,CAAYC,GAAZ,qBACnB,yBAAG,GAAG,CAAEA,GAAR,EAAcD,SAAd,CADmB,EAApB,CATH,cAaE,oBAAC,YAAD,EAAc,QAAQ,CAAEZ,WAAW,CAACD,QAApC,EAbF,cAcE,oBAAC,cAAD,EAAgB,WAAW,CAAEL,IAA7B,CAAmC,cAAc,CAAEO,cAAnD,EAdF,cAeE,gDAfF,cAgBE,oBAAC,YAAD,EAAc,QAAQ,CAAEM,aAAxB,EAhBF,CADF,CAoBD,CAlDD,CAoDA,cAAef,CAAAA,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport articleContent from \"./article-content\";\nimport ArticlesList from \"../components/ArticlesList\";\nimport NotFoundPage from \"./NotFoundPage\";\nimport CommentsList from \"../components/CommentsList\";\nimport UpvotesSection from \"../components/UpvotesSection\";\nimport AddCommentForm from \"../components/AddCommentForm\";\n\nconst ArticlePage = ({ match }) => {\n  const name = match.params.name;\n  const article = articleContent.find((article) => article.name === name);\n\n  // Use useState HOOK to temporarily store information, and the component will re-render once it changes state\n  const [articleInfo, SetArticleInfo] = useState({ upvotes: 0, comments: [] });\n\n  // Use useEffect HOOK to perform the side effects of the component, fetching data, setting state\n  // The second para is the watching list that only the members in the list will triger the useEffect. If the watching list is [], the useEffect will only be called once(when the page loaded)\n  // useEffect HOOK do NOT allow an async function ex:useEffect(async () =>..\n  useEffect(() => {\n    const fetchData = async () => {\n      // Add the proxy(http://localhost:8000) in package.json\n      const result = await fetch(`/api/articles/${name}`);\n      const body = await result.json();\n      SetArticleInfo(body);\n    };\n\n    fetchData();\n  }, [name]);\n  // In this case, whenever the name changes(different article) the useEffect will be called(changes the articleInfo)\n\n  if (!article) {\n    return <NotFoundPage />;\n  }\n\n  const otherArticles = articleContent.filter(\n    (article) => article.name !== name\n  );\n\n  return (\n    <React.Fragment>\n      <h1>{article.title}</h1>\n\n      <UpvotesSection\n        articleName={name}\n        upvotes={articleInfo.upvotes}\n        setArticleInfo={SetArticleInfo}\n      />\n\n      {article.content.map((paragraph, key) => (\n        <p key={key}>{paragraph}</p>\n      ))}\n\n      <CommentsList comments={articleInfo.comments} />\n      <AddCommentForm articleName={name} setArticleInfo={SetArticleInfo} />\n      <h3>Other Articles:</h3>\n      <ArticlesList articles={otherArticles} />\n    </React.Fragment>\n  );\n};\n\nexport default ArticlePage;\n"]},"metadata":{},"sourceType":"module"}