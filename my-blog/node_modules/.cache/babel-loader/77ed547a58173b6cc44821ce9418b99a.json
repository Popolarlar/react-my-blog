{"ast":null,"code":"var _jsxFileName = \"/Users/jin/ReactProject/my-blog-app/my-blog/src/pages/ArticlePage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport articleContent from \"./article-content\";\nimport ArticlesList from \"../components/ArticlesList\";\nimport NotFoundPage from \"./NotFoundPage\";\n\nconst ArticlePage = ({\n  match\n}) => {\n  const name = match.params.name;\n  const article = articleContent.find(article => article.name === name); // Use useState HOOK to temporarily store information, and the component will re-render once it changes state\n\n  const [articleInfo, SetArticleInfo] = useState({\n    upvotes: 0,\n    comments: []\n  }); // Use useEffect HOOK to perform the side effects of the component, fetching data, setting state\n  // The second para is the watching list that only the members in the list will triger the useEffect\n  // If the watching list is [], the useEffect will only be called once(when the page loaded)\n  // In this case, whenever the name changes(different article) the useEffect will be called\n\n  useEffect(() => {\n    SetArticleInfo({\n      upvotes: Math.ceil(Math.random() * 10)\n    });\n  }, [name]);\n\n  if (!article) {\n    return /*#__PURE__*/React.createElement(NotFoundPage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const otherArticles = articleContent.filter(article => article.name !== name);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, article.title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"This post has been upvoted \", articleInfo.upvotes, \" times\"), article.content.map((paragraph, key) => /*#__PURE__*/React.createElement(\"p\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, paragraph)), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \"Other Articles:\"), /*#__PURE__*/React.createElement(ArticlesList, {\n    articles: otherArticles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ArticlePage;","map":{"version":3,"sources":["/Users/jin/ReactProject/my-blog-app/my-blog/src/pages/ArticlePage.js"],"names":["React","useState","useEffect","articleContent","ArticlesList","NotFoundPage","ArticlePage","match","name","params","article","find","articleInfo","SetArticleInfo","upvotes","comments","Math","ceil","random","otherArticles","filter","title","content","map","paragraph","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACjC,QAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaD,IAA1B;AACA,QAAME,OAAO,GAAGP,cAAc,CAACQ,IAAf,CAAqBD,OAAD,IAAaA,OAAO,CAACF,IAAR,KAAiBA,IAAlD,CAAhB,CAFiC,CAIjC;;AACA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC;AAAEa,IAAAA,OAAO,EAAE,CAAX;AAAcC,IAAAA,QAAQ,EAAE;AAAxB,GAAD,CAA9C,CALiC,CAOjC;AACA;AACA;AACA;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,cAAc,CAAC;AAAEC,MAAAA,OAAO,EAAEE,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,EAA1B;AAAX,KAAD,CAAd;AACD,GAFQ,EAEN,CAACV,IAAD,CAFM,CAAT;;AAIA,MAAI,CAACE,OAAL,EAAc;AACZ,wBAAO,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,QAAMS,aAAa,GAAGhB,cAAc,CAACiB,MAAf,CACnBV,OAAD,IAAaA,OAAO,CAACF,IAAR,KAAiBA,IADV,CAAtB;AAIA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKE,OAAO,CAACW,KAAb,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAA+BT,WAAW,CAACE,OAA3C,WAFF,EAGGJ,OAAO,CAACY,OAAR,CAAgBC,GAAhB,CAAoB,CAACC,SAAD,EAAYC,GAAZ,kBACnB;AAAG,IAAA,GAAG,EAAEA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcD,SAAd,CADD,CAHH,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAPF,eAQE,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEL,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF;AAYD,CAnCD;;AAqCA,eAAeb,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport articleContent from \"./article-content\";\nimport ArticlesList from \"../components/ArticlesList\";\nimport NotFoundPage from \"./NotFoundPage\";\n\nconst ArticlePage = ({ match }) => {\n  const name = match.params.name;\n  const article = articleContent.find((article) => article.name === name);\n\n  // Use useState HOOK to temporarily store information, and the component will re-render once it changes state\n  const [articleInfo, SetArticleInfo] = useState({ upvotes: 0, comments: [] });\n\n  // Use useEffect HOOK to perform the side effects of the component, fetching data, setting state\n  // The second para is the watching list that only the members in the list will triger the useEffect\n  // If the watching list is [], the useEffect will only be called once(when the page loaded)\n  // In this case, whenever the name changes(different article) the useEffect will be called\n  useEffect(() => {\n    SetArticleInfo({ upvotes: Math.ceil(Math.random() * 10) });\n  }, [name]);\n\n  if (!article) {\n    return <NotFoundPage />;\n  }\n\n  const otherArticles = articleContent.filter(\n    (article) => article.name !== name\n  );\n\n  return (\n    <React.Fragment>\n      <h1>{article.title}</h1>\n      <p>This post has been upvoted {articleInfo.upvotes} times</p>\n      {article.content.map((paragraph, key) => (\n        <p key={key}>{paragraph}</p>\n      ))}\n\n      <h3>Other Articles:</h3>\n      <ArticlesList articles={otherArticles} />\n    </React.Fragment>\n  );\n};\n\nexport default ArticlePage;\n"]},"metadata":{},"sourceType":"module"}