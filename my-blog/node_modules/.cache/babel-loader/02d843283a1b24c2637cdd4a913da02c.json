{"ast":null,"code":"var _jsxFileName = \"/Users/jin/ReactProject/my-blog-app/my-blog/src/pages/ArticlePage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport articleContent from \"./article-content\";\nimport ArticlesList from \"../components/ArticlesList\";\nimport NotFoundPage from \"./NotFoundPage\";\nimport CommentsList from \"../components/CommentsList\";\nimport UpvotesSection from \"../components/UpvotesSection\";\nimport AddCommentForm from \"../components/AddCommentForm\";\n\nconst ArticlePage = ({\n  match\n}) => {\n  const name = match.params.name;\n  const article = articleContent.find(article => article.name === name); // Use useState HOOK to temporarily store information, and the component will re-render once it changes state\n\n  const [articleInfo, SetArticleInfo] = useState({\n    upvotes: 0,\n    comments: []\n  }); // Use useEffect HOOK to perform the side effects of the component, fetching data, setting state\n  // The second para is the watching list that only the members in the list will triger the useEffect. If the watching list is [], the useEffect will only be called once(when the page loaded)\n  // useEffect HOOK do NOT allow an async function ex:useEffect(async () =>..\n\n  useEffect(() => {\n    const fetchData = async () => {\n      // Add the proxy(http://localhost:8000) in package.json\n      const result = await fetch(`/api/articles/${name}`);\n      const body = await result.json();\n      SetArticleInfo(body);\n    };\n\n    fetchData();\n  }, [name]); // In this case, whenever the name changes(different article) the useEffect will be called(changes the articleInfo)\n\n  if (!article) {\n    return /*#__PURE__*/React.createElement(NotFoundPage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const otherArticles = articleContent.filter(article => article.name !== name);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, article.title), /*#__PURE__*/React.createElement(UpvotesSection, {\n    articleName: name,\n    upvotes: articleInfo.upvotes,\n    setArticleInfo: SetArticleInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), article.content.map((paragraph, key) => /*#__PURE__*/React.createElement(\"p\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, paragraph)), /*#__PURE__*/React.createElement(CommentsList, {\n    comments: articleInfo.comments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AddCommentForm, {\n    articleName: name,\n    setArticleInfo: SetArticleInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"Other Articles:\"), /*#__PURE__*/React.createElement(ArticlesList, {\n    articles: otherArticles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ArticlePage;","map":{"version":3,"sources":["/Users/jin/ReactProject/my-blog-app/my-blog/src/pages/ArticlePage.js"],"names":["React","useState","useEffect","articleContent","ArticlesList","NotFoundPage","CommentsList","UpvotesSection","AddCommentForm","ArticlePage","match","name","params","article","find","articleInfo","SetArticleInfo","upvotes","comments","fetchData","result","fetch","body","json","otherArticles","filter","title","content","map","paragraph","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACjC,QAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaD,IAA1B;AACA,QAAME,OAAO,GAAGV,cAAc,CAACW,IAAf,CAAqBD,OAAD,IAAaA,OAAO,CAACF,IAAR,KAAiBA,IAAlD,CAAhB,CAFiC,CAIjC;;AACA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAC;AAAEgB,IAAAA,OAAO,EAAE,CAAX;AAAcC,IAAAA,QAAQ,EAAE;AAAxB,GAAD,CAA9C,CALiC,CAOjC;AACA;AACA;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,SAAS,GAAG,YAAY;AAC5B;AACA,YAAMC,MAAM,GAAG,MAAMC,KAAK,CAAE,iBAAgBV,IAAK,EAAvB,CAA1B;AACA,YAAMW,IAAI,GAAG,MAAMF,MAAM,CAACG,IAAP,EAAnB;AACAP,MAAAA,cAAc,CAACM,IAAD,CAAd;AACD,KALD;;AAOAH,IAAAA,SAAS;AACV,GATQ,EASN,CAACR,IAAD,CATM,CAAT,CAViC,CAoBjC;;AAEA,MAAI,CAACE,OAAL,EAAc;AACZ,wBAAO,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,QAAMW,aAAa,GAAGrB,cAAc,CAACsB,MAAf,CACnBZ,OAAD,IAAaA,OAAO,CAACF,IAAR,KAAiBA,IADV,CAAtB;AAIA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKE,OAAO,CAACa,KAAb,CADF,eAGE,oBAAC,cAAD;AACE,IAAA,WAAW,EAAEf,IADf;AAEE,IAAA,OAAO,EAAEI,WAAW,CAACE,OAFvB;AAGE,IAAA,cAAc,EAAED,cAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EASGH,OAAO,CAACc,OAAR,CAAgBC,GAAhB,CAAoB,CAACC,SAAD,EAAYC,GAAZ,kBACnB;AAAG,IAAA,GAAG,EAAEA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcD,SAAd,CADD,CATH,eAaE,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEd,WAAW,CAACG,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,eAcE,oBAAC,cAAD;AAAgB,IAAA,WAAW,EAAEP,IAA7B;AAAmC,IAAA,cAAc,EAAEK,cAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAfF,eAgBE,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEQ,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,CADF;AAoBD,CAlDD;;AAoDA,eAAef,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport articleContent from \"./article-content\";\nimport ArticlesList from \"../components/ArticlesList\";\nimport NotFoundPage from \"./NotFoundPage\";\nimport CommentsList from \"../components/CommentsList\";\nimport UpvotesSection from \"../components/UpvotesSection\";\nimport AddCommentForm from \"../components/AddCommentForm\";\n\nconst ArticlePage = ({ match }) => {\n  const name = match.params.name;\n  const article = articleContent.find((article) => article.name === name);\n\n  // Use useState HOOK to temporarily store information, and the component will re-render once it changes state\n  const [articleInfo, SetArticleInfo] = useState({ upvotes: 0, comments: [] });\n\n  // Use useEffect HOOK to perform the side effects of the component, fetching data, setting state\n  // The second para is the watching list that only the members in the list will triger the useEffect. If the watching list is [], the useEffect will only be called once(when the page loaded)\n  // useEffect HOOK do NOT allow an async function ex:useEffect(async () =>..\n  useEffect(() => {\n    const fetchData = async () => {\n      // Add the proxy(http://localhost:8000) in package.json\n      const result = await fetch(`/api/articles/${name}`);\n      const body = await result.json();\n      SetArticleInfo(body);\n    };\n\n    fetchData();\n  }, [name]);\n  // In this case, whenever the name changes(different article) the useEffect will be called(changes the articleInfo)\n\n  if (!article) {\n    return <NotFoundPage />;\n  }\n\n  const otherArticles = articleContent.filter(\n    (article) => article.name !== name\n  );\n\n  return (\n    <React.Fragment>\n      <h1>{article.title}</h1>\n\n      <UpvotesSection\n        articleName={name}\n        upvotes={articleInfo.upvotes}\n        setArticleInfo={SetArticleInfo}\n      />\n\n      {article.content.map((paragraph, key) => (\n        <p key={key}>{paragraph}</p>\n      ))}\n\n      <CommentsList comments={articleInfo.comments} />\n      <AddCommentForm articleName={name} setArticleInfo={SetArticleInfo} />\n      <h3>Other Articles:</h3>\n      <ArticlesList articles={otherArticles} />\n    </React.Fragment>\n  );\n};\n\nexport default ArticlePage;\n"]},"metadata":{},"sourceType":"module"}